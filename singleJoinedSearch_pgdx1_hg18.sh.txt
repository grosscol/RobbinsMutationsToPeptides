#!/bin/bash

###############################################################################
#   Title: Single Sample Mutations Search cDNA in UCSC hg18
#   Author: Colin A. Gross
#   Date: 2012-06-07
#   Desc:
#
# This script is designed to take a list of transcript names and get the cDNA
# sequences from the UCSC database mirror hosted on biobase.nih.gov.
# Expected columns are:
#  Gene name	Transcript	strand	cDNA change	Ref cDNA	
#    var cDNA	protein change	ref AA	var AA	chrom	leftflank+1	
#    rightflank-1	Ref_allele	Var_allele		Original_gene_name	
#    Original_aa_change	Original_type
#
###############################################################################

############################
#   Function Definitions   #
############################
function throwError
{
  echo ERROR: $1
  exit 1
}


############################
#   Variables              #
############################
infile=     #name of arg 1, the input data file
sqlcmnd='mysql [connection details] --database=hg18'
datetime=`date +%F_%H%M%S`
outdir='./'
outfile='../procdata/'"mutsrefs_$datetime"'.txt'
outrefs='../procdata/'"lookuprefs_$datetime"'.txt'
outtrm='../procdata/'"trminput_$datetime"'.txt'


#####################################
######   Main                 ######
###################################

#################
### CHECK INPUT ##
###################
#Check length of arguements

if [ $# -ne 2 ]
then 
  echo "usage: $0 inputfile outputdir"
  exit 1   # status 1 signals an error
fi

#Check that input file (arg 1) exists,
#  is a regular file, not size 0, user has read permission

if [ -e "$1" ] && [ -f "$1" ] && [ -s "$1" ] && [ -r "$1" ]
then
  # assign arg 1 to the varriable infile
  infile=$1
else
  echo "Input file DOES NOT exist OR is size zero OR IS NOT readable."
  exit 1
fi

echo "Infile is $infile"

if [ -e "$2" ] && [ -d "$2" ] && [ -s "$2" ] && [ -w "$2" ]
then
  # assign arg 1 to the varriable infile
  outdir=$2
else
  echo "Input file DOES NOT exist OR is not a directory OR IS NOT writeable."
  exit 1
fi

outfile="$outdir/mutsrefs.txt"
outrefs="$outdir/lookuprefs.txt"
outtrm="$outdir/trminput.txt"

echo "Outdir is $outdir"
echo "Outtrm is $outtrm"
echo "Outrefs is $outrefs"
echo "Outfile is $outfile"

#Check that it is tab delimited with at least four columns (head contains three tabs)

if [ `head -n 1 $infile | awk -F \t {'print NF}'` -gt 0 ]
then
  echo "Header has at least four columns."
else
  echo "Header is not tab delimited or has too few columns"
  exit 1
fi

################################################
### DO SEARCH & WRITE reference DATA TO FILE ##
##############################################
#Calculate some useful variables
firstline=`grep -v -n \# $infile | head -n 1 | awk -F : '{print $1}'`
nlines=`awk 'END {print NR}' $infile`
let nloops="($nlines - $firstline) / 4000 + 1"


echo "Number of lines in infile: $nlines"
echo "First data line: $firstline"
echo "Number of loops $nloops"

#USE HERE DOC FOR MYSQL QUERY

#Get list of unique chrom values
chromos=`cut --fields=1 $infile | tail -n +$firstline | sort -u`

#Do dummy query to get headers
$sqlcmnd << HEREDOC | head -n 1 | awk '{sub(/name/,"transcript");print}' > $outrefs
SELECT knownGene.*, kgXref.geneSymbol FROM knownGene
LEFT JOIN kgXref ON kgID = name
LIMIT 1;
HEREDOC

for ((i=1; i<=$nloops; i++))
do
  let nstart="$firstline + ($i-1) * 4000"
  echo "Doing Query $i"
  echo "nstart = $nstart"
  
#Execute query but add switch to supress column headers being included.
# $sqlcmnd --skip-column-names
$sqlcmnd --skip-column-names 1>> $outrefs << MYHEREDOC
SELECT knownGene.*, kgXref.geneSymbol FROM knownGene
LEFT JOIN kgXref ON kgID = name
WHERE name IN ('\
`tail -n +$nstart $infile | cut --fields=2 | sort |\
tr '\n' '-' | sed -e 's:-:'\'','\'':g' -e 's:.\{3\}$::g'`\
');
MYHEREDOC

done

echo "Wrote mutation and mRNA data to $outrefs"

################################################
### Merge mutations data with reference data ##
##############################################

#Trim input file to columns of interest
cut --fields=2,11-14 $infile | sort > $outtrm

#Merge trimmed input and reference
join --ignore-case -a 1 -j 1 $outtrm $outrefs > $outfile



#Done

echo "Done."

exit